# .github/workflows/python_ci.yml

name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install Python packages required by ytconverter.py
        # httpx is included here as per the workflow definition.
        pip install colored fontstyle httpx yt-dlp

    - name: Check syntax of ytconverter.py
      run: python -m py_compile ytconverter.py

  test-on-windows:
    runs-on: windows-latest
    needs: build # This job will only run after the 'build' job completes successfully
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      shell: bash # Using bash shell on Windows for consistent syntax
      run: |
        python -m pip install --upgrade pip
        # Install Python packages required for the Windows tests
        pip install colored fontstyle httpx yt-dlp

    - name: Create dummy data.json
      shell: bash
      run: |
        echo "{\"Name\": \"CI User\", \"Num\": \"ci@example.com\"}" > data.json

    - name: Install ffmpeg (Windows)
      # Using Chocolatey to install FFmpeg on Windows, which is common on GitHub Actions runners.
      shell: pwsh # PowerShell is typically used for choco commands
      run: |
        choco install ffmpeg -y

    - name: Check for ffmpeg (Windows)
      shell: pwsh
      run: |
        ffmpeg -version

    - name: Test Single MP3 Download
      shell: bash
      run: |
        echo "Starting Single MP3 Download Test"
        # Simulates user input for ytconverter.py using printf and piping.
        # 'n' inputs bypass initial data collection/update prompts.
        # '1' selects MP3, followed by a dummy URL, '0' for best audio, then an empty line for continue prompt.
        printf "n\nn\nn\n1\nhttp://www.youtube.com/watch?v=dQw4w9WgXcQ\n0\n\n" | python ytconverter.py
        echo "Single MP3 Download Test Finished"

    - name: Test Single MP4 Download
      shell: bash
      run: |
        echo "Starting Single MP4 Download Test"
        # 'n' inputs, '2' selects MP4, dummy URL, '1' for first format, empty line for continue.
        printf "n\nn\nn\n2\nhttp://www.youtube.com/watch?v=dQw4w9WgXcQ\n1\n\n" | python ytconverter.py
        echo "Single MP4 Download Test Finished"

    - name: Test Multiple MP4 Download
      shell: bash
      run: |
        echo "Starting Multiple MP4 Download Test"
        # 'n' inputs, '3' for multi-MP4, dummy URL, '0' to start multi-download, '1' for quality, empty line for continue.
        printf "n\nn\nn\n3\nhttp://www.youtube.com/watch?v=dQw4w9WgXcQ\n0\n1\n\n" | python ytconverter.py
        echo "Multiple MP4 Download Test Finished"

    - name: Test Exit Option
      shell: bash
      run: |
        echo "Starting Exit Option Test"
        # 'n' inputs, '4' to exit the script.
        printf "n\nn\nn\n4\n" | python ytconverter.py
        echo "Exit Option Test Finished"

